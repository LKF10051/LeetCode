user  www www;
worker_processes  auto;

error_log   logs/nginx_error.log error; 
pid         /usr/local/openresty/nginx/logs/nginx.pid;
 
worker_rlimit_nofile 65535;
events {
   use epoll;
   worker_connections  65535;
}

http {

    init_worker_by_lua_block {
        local uuid = require 'resty.jit-uuid'
        uuid.seed() -- very important!
    }
    upstream backend {
        server 1.1.1.1:6379;

        # a pool with at most 1024 connections
        # and do not distinguish the servers:
        keepalive 1024;
    }

    limit_req_zone $binary_remote_addr zone=forbidden_rule:20m rate=1000r/m;

    server {
        listen 80;
        server_name xxx.com;
        #server_name xxx.com;
        lua_need_request_body on;

        client_max_body_size 16m;
	client_body_buffer_size 16m;

        set $redis_pwd piaogen@123; 
        set $redis_threshold 200000; 
        set $redis_queue_name queue; 
   
        listen 443 ssl;

        ssl on;
        ssl_certificate /usr/local/nginx/conf/ssl/xxx.crt;
        ssl_certificate_key /usr/local/nginx/conf/ssl/xxx.key;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;
        ssl_prefer_server_ciphers on;

        add_header Strict-Transport-Security max-age=15768000;

        location = /redis_llen {
            internal;
            redis2_query auth $redis_pwd;
            redis2_query llen $redis_queue_name;
            redis2_pass backend;
        }
        
        location = /redis_push {
            internal;
            redis2_query auth $redis_pwd;
            set_unescape_uri $key $arg_key;
            redis2_query lpush $redis_queue_name $key;
            redis2_pass backend;
        }

        location / {
            limit_req zone=forbidden_rule burst=300 nodelay;
            include website/auto_blockip.conf;
            include website/manual_blackip.conf;
            set $target '';
            access_by_lua '
                -- if ngx.var.server_name == "xxx.com"
                --    
                --    return
                -- end
                
                local llen_res = ngx.location.capture(
                    "/redis_llen", { args = {  } }
                )

                if llen_res.status ~= 200 then
                    ngx.say(ngx.ERR, "redis server returned bad status: ",
                        llen_res.status)
                    ngx.exit(llen_res.status)
                end
                
                function str_split(inputstr, sep)
                    if sep == nil then
                        sep = "%s"
                    end
                    local t={} ; i=1
                    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                        t[i] = str
                        i = i + 1
                    end
                    return t
                end
                
                local llen_body_vec = str_split(llen_res.body, ":") --body format like: "+OK\\r\\n:3\\r\\n"

                print("list_len: ", llen_body_vec[2])

                if tonumber(llen_body_vec[2]) > tonumber(ngx.var.redis_threshold) then
                    ngx.status = 500
                    ngx.say("error : over "..ngx.var.redis_threshold.." requests in redis ")
                    ngx.exit(ngx.OK)
                end

                local headers = ngx.req.get_headers()
                headers["ip"] = ngx.var.remote_addr
                
                local json = require("cjson")

                local post_args = ngx.req.get_post_args()
                post_args["in_queue_at"] = os.date("%Y-%m-%d %X")
                local uuid = require ("resty.jit-uuid")
                post_args["sn"] = uuid()

                local total = {}
                total["post_args"] = post_args
                total["headers"] = headers
                local total_data = json.encode(total)

                -- print("key: ", total_data)
                local res = ngx.location.capture(
                    "/redis_push", { args = { key = total_data } }
                )
        
                ngx.say("OK");
            ';

        # try_files $uri $uri/ /index.php$is_args$args;
       
        	}
    	}

	server  {
        listen 443 ssl;

        ssl on;
        ssl_certificate /etc/letsencrypt/live/xxx.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/xxx.com/privkey.pem;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;
        ssl_prefer_server_ciphers on;

        add_header Strict-Transport-Security max-age=15768000;

	lua_need_request_body on;
        client_max_body_size 16m;
        client_body_buffer_size 16m;

        server_name xxx.com;
        index index.html index.htm index.php default.html default.htm default.php;
        root  /home/wwwroot/piaogen_server/frontend/web;
        include /usr/local/nginx/conf/php-yii.conf;

        access_log /data/wwwlogs/xxx.log;
    }
	# include vhosts/*.conf; 
}
